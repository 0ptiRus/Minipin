@using exam_admin.Models
@using exam_admin.Services
@inject IApiService api

<div class="bg-white rounded-lg shadow-sm p-6 mb-6">
    <div class="flex flex-col md:flex-row md:items-center md:justify-between">
        <div>
            <h1 class="text-2xl font-bold text-gray-800">User Management</h1>
            <p class="text-gray-600">Manage and moderate all registered users</p>
        </div>
        <div class="mt-4 md:mt-0 flex space-x-3">
            <div class="relative flex-1 md:w-64">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400"></i>
                </div>
                <input type="text"
                       @bind="SearchTerm"
                       @oninput="Search"
                       placeholder="Search users..."
                       class="pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 w-full">
            </div>
            <button @onclick="ShowAddUserModal" class="px-4 py-2 bg-indigo-600 text-white rounded-md font-medium hover:bg-indigo-700 flex items-center">
                <i class="fas fa-user-plus mr-2"></i> Add User
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
        <div class="bg-white border border-gray-200 rounded-lg p-4">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-500">Total Users</p>
                    <p class="text-2xl font-semibold text-gray-800">@Stats.TotalUsers</p>
                </div>
                <div class="p-2 rounded-full bg-indigo-50 text-indigo-600">
                    <i class="fas fa-users"></i>
                </div>
            </div>
        </div>
        <div class="bg-white border border-gray-200 rounded-lg p-4">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-500">Administrators</p>
                    <p class="text-2xl font-semibold text-gray-800">@Stats.Administrators</p>
                </div>
                <div class="p-2 rounded-full bg-purple-50 text-purple-600">
                    <i class="fas fa-user-shield"></i>
                </div>
            </div>
        </div>
        <div class="bg-white border border-gray-200 rounded-lg p-4">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-500">Banned Users</p>
                    <p class="text-2xl font-semibold text-gray-800">@Stats.BannedUsers</p>
                </div>
                <div class="p-2 rounded-full bg-red-50 text-red-600">
                    <i class="fas fa-user-lock"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- User Table -->
<UserTable ApiUrl="@ApiUrl" Filter="@Filter" Search="@SearchTerm" OnUserChange="@RefreshStats"/>

@if (ShowModal)
{
<div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative">
        <h2 class="text-xl font-semibold mb-4">Add New User</h2>
        <EditForm Model="NewUser" OnValidSubmit="CreateUser">
            <div class="space-y-4">
                <input @bind="NewUser.Pfp" value="@null"/>
                <InputText @bind-Value="NewUser.Username" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="Name"/>
                <InputText @bind-Value="NewUser.Email" type="email" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="Email"/>
                <InputText @bind-Value="NewUser.Password" type="password" class="w-full border border-gray-300 rounded-md px-3 py-2" placeholder="Password"/>
                <InputSelect @bind-Value="Role" class="w-full border border-gray-300 rounded-md px-3 py-2">
                    <option value="">Select Role</option>
                    <option value="User">User</option>
                    <option value="Admin">Admin</option>
                </InputSelect>
            </div>
            <div class="mt-6 flex justify-end space-x-3">
                <button type="button" class="px-4 py-2 bg-gray-200 rounded-md" @onclick="CloseModal">Cancel</button>
                <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">Create</button>
            </div>
        </EditForm>
        <button class="absolute top-2 right-2 text-gray-500 hover:text-gray-700" @onclick="CloseModal">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>
}

@code {
    [Parameter] public string Filter { get; set; } = null;
    [Parameter] public string ApiUrl { get; set; }
    private string SearchTerm { get; set; } = null;
    private UserStats Stats { get; set; } = new();
    private bool ShowModal { get; set; } = false;
    private string Role { get; set; } = "";
    private UserRegisterModel NewUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadStats();
    }

    private async Task LoadStats()
    {
        var response = await api.GetAsync("User/stats");
        if (response.IsSuccessStatusCode)
        {
            Stats = api.JsonToContent<UserStats>(await response.Content.ReadAsStringAsync());
        }
        StateHasChanged();
    }
    
    
    private void ShowAddUserModal()
    {
        NewUser = new(); // Reset form
        ShowModal = true;
    }
    
    private void CloseModal()
    {
        ShowModal = false;
    }
    
    private async Task CreateUser()
    {
        HttpResponseMessage response;
        if (Role == "Admin")
        {
            response = await api.PostAsJsonAsync("User/register_admin", NewUser);   
        }
        else
        {
            response = await api.PostAsJsonAsync("User/register", NewUser);   
        }
        if (response.IsSuccessStatusCode)
        {
            ShowModal = false;
            await RefreshStats();
        }
        else
        {
            // Optionally show error
        }
    }
    
    private async Task RefreshStats()
    {
        await LoadStats(); 
    }

    private void Search()
    {
        StateHasChanged();
    }

    public class UserStats
    {
        public int TotalUsers { get; set; }
        public int Administrators { get; set; }
        public int BannedUsers { get; set; }
    }
}
