<div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
    <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between w-full">
        <div>
            <p class="text-sm text-gray-700">
                Showing <span class="font-medium">@((CurrentPage - 1) * PageSize + 1)</span>
                to <span class="font-medium">@Math.Min(CurrentPage * PageSize, TotalItems)</span>
                of <span class="font-medium">@TotalItems</span> results
            </p>
        </div>
        <div>
            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                <button class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                        @onclick="() => SelectPage(CurrentPage - 1)" disabled="@(@CurrentPage == 1)">
                    <span class="sr-only">Previous</span>
                    <i class="fas fa-chevron-left"></i>
                </button>

                @foreach (var page in GetPageRange())
                {
                    if (page == -1)
                    {
                        <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">â€¦</span>
                    }
                    else
                    {
                        <button class="relative inline-flex items-center px-4 py-2 border text-sm font-medium @(page == CurrentPage ? "bg-indigo-50 border-indigo-500 text-indigo-600 z-10" : "bg-white border-gray-300 text-gray-500 hover:bg-gray-50")"
                                @onclick="() => Console.WriteLine()" @onclick:preventDefault>
                            @(page)
                        </button>
                    }
                }

                <button class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                        @onclick="() => SelectPage(CurrentPage + 1)">
                    <span class="sr-only">Next</span>
                    <i class="fas fa-chevron-right"></i>
                </button>
            </nav>
        </div>
    </div>
</div>

@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public int PageSize { get; set; } = 5;
    [Parameter] public EventCallback<int> OnPageSelected { get; set; }

    private int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);

    private async Task SelectPage(int page)
    {
        //if (page < 1 || page > TotalPages || page == CurrentPage) return;
        CurrentPage = page;
        await OnPageSelected.InvokeAsync(page);
    }

    private IEnumerable<int> GetPageRange()
    {
        if (TotalPages <= 7)
            return Enumerable.Range(1, TotalPages);

        var range = new List<int> { 1 };

        if (CurrentPage > 3)
            range.Add(-1); // for "..."

        int start = Math.Max(2, CurrentPage - 1);
        int end = Math.Min(TotalPages - 1, CurrentPage + 1);

        for (int i = start; i <= end; i++)
            range.Add(i);

        if (CurrentPage < TotalPages - 2)
            range.Add(-1); // for "..."

        range.Add(TotalPages);
        return range;
    }
}