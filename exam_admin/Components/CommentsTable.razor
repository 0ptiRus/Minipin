@using exam_admin.Models
@using exam_admin.Services
@inject IApiService api 

<div class="bg-white rounded-lg shadow-sm overflow-hidden">
    <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
            <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Comment
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    User
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    On Content
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                </th>
            </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
            @if (comments == null)
            {
                <tr><td colspan="5" class="px-6 py-4">Loading...</td></tr>
            }
            else if (!comments.Any())
            {
                <tr><td colspan="5" class="px-6 py-4">No posts found.</td></tr>
            }
            else
            {
                foreach (var comment in comments)
                { 
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4">
                            <div class="flex items-center">
                                <div class="ml-4">
                                    <div class="comment-content text-sm font-medium text-gray-900">
                                        "@comment.Text"
                                    </div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="flex-shrink-0 h-8 w-8 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-600">
                                    <i class="fas fa-user text-sm"></i>
                                </div>
                                <div class="ml-3">
                                    <div class="text-sm font-medium text-gray-900">@comment.Username</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="flex-shrink-0 h-8 w-8">
                                    <img class="h-8 w-8 rounded-md object-cover" src="@comment.CommentPostImage" alt="">
                                </div>
                                <div class="ml-3">
                                    <div class="text-sm font-medium text-gray-900">@comment.CommentPostName</div>
                                    <div class="text-sm text-gray-500">Post</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            @if (comment.IsDeleted)
                            {
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-200 text-gray-700">
                                    Deleted
                                </span>
                            }
                            else if (comment.IsFlagged)
                            {
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                    Flagged
                                </span>
                            }
                            else
                            {   
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                    Active
                                </span>
                            }
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <div class="relative inline-block text-left">
                                <button @onclick="() => ToggleDropdown(comment.Id)" type="button" class="dropdown-toggle inline-flex justify-center w-8 h-8 rounded-full bg-gray-100 text-gray-400 hover:text-gray-600 focus:outline-none" aria-expanded="false">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                @if (ActiveDropdownCommentId == comment.Id)
                                {
                                    <div class="dropdown-content origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
                                        <div class="py-1">
                                            @if (!comment.IsDeleted)
                                            {
                                                <button @onclick="() => DeleteComment(comment.Id)" class="block px-4 py-2 text-sm text-red-600 hover:bg-red-50"><i class="fas fa-trash mr-2"></i> Delete</button>   
                                            }
                                            else
                                            {
                                                <button @onclick="() => RestoreComment(comment.Id)" class="block px-4 py-2 text-sm text-green-600 hover:bg-green-50"><i class="fas fa-check mr-2"></i> Restore</button>
                                            }
                                        </div>
                                    </div>   
                                }
                            </div>
                        </td>
                </tr>


                }
            }
            </tbody>
        </table>
    </div>
</div>
@code {
    [Parameter] public string ApiUrl { get; set; } = string.Empty;
    [Parameter] public string Filter { get; set; } = null;
    [Parameter] public string Search { get; set; } = null;
    [Parameter] public EventCallback OnCommentChange { get; set; }
    private List<AdminCommentModel> comments = new();
    private int? ActiveDropdownCommentId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(ApiUrl))
            await LoadPage();
    }

    private void ToggleDropdown(int comment_id)
    {
        if (ActiveDropdownCommentId == comment_id)
            ActiveDropdownCommentId = null;
        else
            ActiveDropdownCommentId = comment_id;

        StateHasChanged();
    }

    private async Task LoadPage()
    {
        string request = $"{ApiUrl}?filter={Filter}&search={Search}";
        
        HttpResponseMessage response = await api.GetAsync(request);
        if (response.IsSuccessStatusCode)
        {
            PagedResponse<AdminCommentModel> items = api.JsonToContent<PagedResponse<AdminCommentModel>>(await response.Content.ReadAsStringAsync());
            comments = items.Items;
            
            StateHasChanged();
        }
    }

    private async Task DeleteComment(int comment_id)
    {
        HttpResponseMessage response = await api.PostAsJsonAsync($"Comments/remove", new { CommentId = comment_id });
        if (response.IsSuccessStatusCode)
        {
            AdminCommentModel? comment = comments.FirstOrDefault(c => c.Id == comment_id);
            if (comment != null)
            {
                comment.IsDeleted = true;
            }
            StateHasChanged();
            await OnCommentChange.InvokeAsync();
        }
    }

    private async Task RestoreComment(int comment_id)
    {
        HttpResponseMessage response = await api.PostAsJsonAsync($"Comments/restore", new { CommentId = comment_id });
        if (response.IsSuccessStatusCode)
        {
            AdminCommentModel? comment = comments.FirstOrDefault(c => c.Id == comment_id);
            if (comment != null)
            {
                comment.IsDeleted = false;
            }

            StateHasChanged();
            await OnCommentChange.InvokeAsync();
        }
    }
}