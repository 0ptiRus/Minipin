@using exam_admin.Models
@inject HttpClient Http
@using System.Net.Http.Json
@using exam_admin.Services
@inject IApiService api

@namespace exam_admin.Components

<div class="bg-white rounded-lg shadow-sm overflow-hidden">
    <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
            <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
            @if (users == null)
            {
                <tr><td colspan="5" class="px-6 py-4">Loading...</td></tr>
            }
            else if (!users.Any())
            {
                <tr><td colspan="5" class="px-6 py-4">No users found.</td></tr>
            }
            else
            {
                foreach (var user in users)
                {
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <img src="@user.Pfp" class="flex-shrink-0 h-10 w-10 rounded-full avatar flex items-center justify-center text-white font-semibold">
                                <div class="ml-4">
                                    <div class="text-sm font-medium text-gray-900">@user.Username</div>
                                    <div class="text-sm text-gray-500">@user.Email</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                @user.Role
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @(!user.IsBanned ? "bg-green-100 text-green-800" : "bg-gray-100 text-red-500")">
                                @(!user.IsBanned ? "Active" : "Banned")
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 z-100">
                            <div class="relative inline-block text-left">
                                <button type="button"
                                        @onclick="() => ToggleDropdown(user.Id)"
                                        class="dropdown-toggle inline-flex justify-center w-8 h-8 rounded-full bg-gray-100 text-gray-400 hover:text-gray-600 focus:outline-none">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                @if (ActiveDropdownUserId == user.Id)
                                {
                                    <div class="dropdown-content origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
                                        <div class="py-1 pointer-events-auto">
                                            @if (user.IsBanned)
                                            {
                                                <button type="button"
                                                        @onclick="() => UnbanUser(user.Id)"
                                                        class="block px-4 py-2 text-sm text-green-600 hover:bg-red-50">
                                                    <i class="fas fa-check mr-2"></i> Unban User
                                                </button>
                                            }
                                            else
                                            {
                                                <button type="button"
                                                        @onclick="() => BanUser(user.Id)"
                                                        class="block px-4 py-2 text-sm text-red-600 hover:bg-red-50">
                                                    <i class="fas fa-ban mr-2"></i> Ban User
                                                </button>   
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </td>
                    </tr>
                                   
                }
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter] public string ApiUrl { get; set; } = string.Empty;
    [Parameter] public string Filter { get; set; } = null;
    [Parameter] public string Search { get; set; } = null;
    [Parameter] public EventCallback OnUserChange { get; set; }
    private List<ViewUserModel> users = new();
    private string ActiveDropdownUserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadPage();
    }

    private void ToggleDropdown(string user_id)
    {
        if (ActiveDropdownUserId == user_id)
            ActiveDropdownUserId = null;
        else
            ActiveDropdownUserId = user_id;

        StateHasChanged();
    }

    private async Task LoadPage()
    {

        string request = $"{ApiUrl}?filter={Filter}&search={Search}";
        
        HttpResponseMessage response = await api.GetAsync(request);
        if (response.IsSuccessStatusCode)
        {
            PagedResponse<ViewUserModel> items = api.JsonToContent<PagedResponse<ViewUserModel>>(await response.Content.ReadAsStringAsync());
            users = items.Items;
            
            StateHasChanged();
        }
    }
    
    private async Task BanUser(string userId)
    {
        HttpResponseMessage response = await api.PostAsJsonAsync("User/ban", new { UserId = userId });
        if (response.IsSuccessStatusCode)
        {
            ViewUserModel? user = users.FirstOrDefault(u => u.Id == userId);
            if (user != null)
            {
                user.IsBanned = true;
            }
            StateHasChanged();
            await OnUserChange.InvokeAsync();
        }
        else
        {
            Console.WriteLine("Failed to ban user.");
        }
    }
    
    private async Task UnbanUser(string userId)
    {
        HttpResponseMessage response = await api.PostAsJsonAsync("User/unban", new { UserId = userId });
        if (response.IsSuccessStatusCode)
        {
            ViewUserModel? user = users.FirstOrDefault(u => u.Id == userId);
            if (user != null)
            {
                user.IsBanned = false;
            }
            StateHasChanged();
            await OnUserChange.InvokeAsync();
        }
        else
        {
            Console.WriteLine("Failed to ban user.");
        }
    }

}
