@using exam_frontend.Entities
@using exam_frontend.Models
@inject IHttpContextAccessor HttpContextAccessor
@inject HttpClient Http

<head>
    <link rel="stylesheet" href="~/css/image/details.css"/>
</head>

<div class="comments">
    @foreach (var comment in @Comments)
    {
        <div class="comment">@comment.Text</div>
    }
</div>

<EditForm Model="@new_comment" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="new_comment.Text" id="commentText" placeholder="Write a comment.." />
    <button type="submit" onclick="">Post Comment</button>
</EditForm>

@code {
    [Parameter] public List<CommentModel> Comments { get; set; }
    [Parameter] public int ImageId { get; set; }
    [Parameter] public string UserId { get; set; }

    private Comment new_comment = new();
    
    private async Task HandleValidSubmit()
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post,
            $"/Comment?image_id={ImageId}&user_id={UserId}&text={new_comment.Text}");
        IRequestCookieCollection cookies = HttpContextAccessor.HttpContext.Request.Cookies;

        foreach (var cookie in cookies)
        {
            request.Headers.TryAddWithoutValidation("Cookie", $"{cookie.Key}={cookie.Value};");
        }

        HttpResponseMessage response = await Http.SendAsync(request);
        CommentModel comment = await response.Content.ReadFromJsonAsync<CommentModel>();

        Comments.Add(comment);
        new_comment = new();
    }

    public class Comment()
    {
        public string Text { get; set; }
    }

}
