@using exam_api.Models
@using exam_frontend.Entities
@using exam_frontend.Models
@using exam_frontend.Services
@inject IApiService api
@inject AuthenticationStateProvider AuthProvider

<head>
    <link rel="stylesheet" href="~/css/gallery/details.css"/>
</head>

<section class="container mx-auto px-4 pb-12">
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-bold text-gray-800">All Pins</h2>
        <div class="flex items-center space-x-3">
            <button class="flex items-center text-gray-600 hover:text-yellow-500">
                <i class="fas fa-sliders-h mr-2"></i>
                <span>Filter</span>
            </button>
            <button class="flex items-center text-gray-600 hover:text-yellow-500">
                <i class="fas fa-sort-amount-down mr-2"></i>
                <span>Sort</span>
            </button>
        </div>
    </div>

    <div class="pin-grid">
        @foreach (var post in posts)
        {
        <div class="pin-card bg-white rounded-xl overflow-hidden shadow-sm relative group">
            <!-- Link + image -->
            <a href="/Post/Details/@post.Id" class="block relative z-0">
                <img src="@post.ImageUrl" alt="@post.Name" class="w-full pin-image">
            </a>

            <!-- Info block -->
            <div class="p-4 z-0 relative">
                <h3 class="font-bold text-gray-800 mb-1">@post.Name</h3>
                <p class="text-gray-600 text-sm mb-2">@post.Description</p>
                <div class="flex items-center text-gray-500 text-sm">
                    <i class="fas fa-comment ml-3 mr-1"></i>
                    <span>@post.Comments.Count</span>
                </div>
            </div>

            <!-- Hover Overlay Buttons -->
            <div class="absolute inset-0 flex items-center justify-center pointer-events-none z-10 pin-overlay">
                @if (post.UserId == UserId)
                {
                <button class="w-10 h-10 bg-white rounded-full flex items-center justify-center text-yellow-600 shadow pointer-events-auto"
                        @onclick:stopPropagation="true"
                        @onclick="() => OpenModal(post)">
                    <i class="fas fa-pen"></i>
                </button>
                }
            </div>
        </div>


        }
    </div>

    <div class="mt-8 text-center">
        <button class="px-6 py-3 border border-gray-300 text-gray-700 rounded-full font-medium hover:bg-gray-100 transition"
                @onclick="LoadMorePins" disabled="@isLoading">
            @if (isLoading)
            {
            <span>Loading...</span>
            }
            else
            {
            <span>Load More Pins</span>
            }
        </button>
    </div>
</section>

<!-- Modal -->
@if (selectedPost != null)
{
<div class="fixed inset-0 z-50 backdrop-blur-sm flex items-center justify-center">
    <div class="bg-white rounded-lg p-6 w-full max-w-md shadow-lg">
        <h2 class="text-xl font-bold text-gray-800 mb-4">Edit Pin</h2>
        <div class="space-y-4">
            <!-- Move to Another Gallery -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Move to Gallery</label>
                <select class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-400"
                        @bind="selectedGalleryId">
                    <option value="">Select a gallery</option>
                    @foreach (var gallery in galleries)
                    {
                    <option value="@gallery.Id">@gallery.Name</option>
                    }
                </select>
            </div>
            <!-- Remove from Gallery -->
            <div>
                <button class="w-full px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition"
                        @onclick="RemoveFromGallery">
                    Remove from Gallery
                </button>
            </div>
        </div>
        <div class="mt-6 flex justify-end space-x-3">
            <button class="px-4 py-2 text-gray-600 hover:text-gray-800" @onclick="CloseModal">Cancel</button>
            <button class="px-4 py-2 bg-yellow-400 text-white rounded-md hover:bg-yellow-500 transition"
                    @onclick="SaveChanges">
                Save Changes
            </button>
        </div>
    </div>
</div>
}

@code {
    [Parameter] public int GalleryId { get; set; }

    [Parameter] public string UserId { get; set; }

    private List<PostModel> posts = new();
    private int currentPage = 1;
    private bool isLoading = false;

    private PostModel? selectedPost;
    private int? selectedGalleryId;
    private List<PreviewGalleryModel> galleries = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMorePins();
        await LoadGalleries();
    }

    private async Task LoadMorePins()
    {
        isLoading = true;

        IList<PostModel> new_posts = [];

        HttpResponseMessage response = await api.GetAsync($"Posts?galleryId={GalleryId}&page={currentPage}");

        if (response.IsSuccessStatusCode)
        {
            new_posts = api.JsonToContent<IList<PostModel>>(await response.Content.ReadAsStringAsync());
        }

        if (new_posts.Count > 0)
        {
            posts.AddRange(new_posts);
            currentPage++;
        }

        isLoading = false;
    }

    private async Task LoadGalleries()
    {
        HttpResponseMessage response = await api.GetAsync($"Galleries/{UserId}");
        if (response.IsSuccessStatusCode)
        {
            galleries = api.JsonToContent<List<PreviewGalleryModel>>(await response.Content.ReadAsStringAsync());
        }
    }

    private void OpenModal(PostModel post)
    {
        selectedPost = post;
        selectedGalleryId = null; // Reset selected gallery
    }

    private void CloseModal()
    {
        selectedPost = null;
    }

    private async Task SaveChanges()
    {
        if (selectedGalleryId.HasValue && selectedPost != null)
        {
            // Move the pin to the selected gallery
            var response = await api.PostAsJsonAsync("Posts/Move", new PostUpdateModel
            {
                PostId = selectedPost.Id,
                GalleryId = selectedGalleryId.Value
            });

            if (response.IsSuccessStatusCode)
            {
                // Update local state
                posts.Remove(selectedPost);
                selectedPost = null;
            }
        }
    }

    private async Task RemoveFromGallery()
    {
        if (selectedPost != null)
        {
            // Remove the pin from the current gallery
            var response = await api.PostAsJsonAsync("Posts/Remove", new PostUpdateModel
            {
                PostId = selectedPost.Id,
                GalleryId = GalleryId
            });

            if (response.IsSuccessStatusCode)
            {
                // Update local state
                posts.Remove(selectedPost);
                selectedPost = null;
            }
        }
    }

}